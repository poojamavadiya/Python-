# -*- coding: utf-8 -*-
"""Big_Data_Final_GUI_24MDS014.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-NnIVoclBQr7wCtQLHgcdg2q-N-HfSXW

24MDS014_Housing_Price_Analysis
"""

import pandas as pd
import sqlite3
import matplotlib.pyplot as plt
import seaborn as sns
from pywebio import start_server
from pywebio.input import file_upload, select
from pywebio.output import *
from pywebio.session import run_async
import io
import base64

class HousingApp:
    def __init__(self):
        self.db_path = "housing_data.db"
        self.initialize_database()

    def initialize_database(self):
        """Initialize the SQLite database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS housing (
            price REAL, area REAL, bedrooms INTEGER, bathrooms INTEGER,
            stories INTEGER, mainroad TEXT, guestroom TEXT, basement TEXT,
            hotwaterheating TEXT, airconditioning TEXT, parking INTEGER,
            prefarea TEXT, furnishingstatus TEXT)''')
        conn.commit()
        conn.close()

    def upload_file(self):
        """Handle file upload and display preview"""
        file = file_upload("Upload a CSV file", accept=".csv")
        if not file:
            return

        try:
            # Read and process file
            df = pd.read_csv(io.BytesIO(file['content']))
            df.columns = [col.strip().lower() for col in df.columns]

            # Save to database
            conn = sqlite3.connect(self.db_path)
            df.to_sql("housing", conn, if_exists="replace", index=False)
            conn.close()

            put_success("File uploaded successfully!")
            with use_scope('upload-content', clear=True):
                put_table(df.head(10).to_dict('records'))
        except Exception as e:
            toast(f"Error: {str(e)}", color='error')

    def get_data_from_db(self, query):
        """Execute SQL query and return DataFrame"""
        conn = sqlite3.connect(self.db_path)
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df

    def price_distribution(self):
        """Show price distribution by furnishing status"""
        with use_scope('price-analysis', clear=True):
            put_markdown("## Price Distribution Analysis")

            analysis_type = select("Select analysis type", [
                'Average Price by Furnishing Status',
                'Price Distribution by Bedrooms',
                'Price vs Area Scatter Plot',
                'Price Range Distribution'
            ])

            if analysis_type == 'Average Price by Furnishing Status':
                df = self.get_data_from_db("""
                    SELECT furnishingstatus, AVG(price) as avg_price
                    FROM housing GROUP BY furnishingstatus""")

                if df.empty:
                    toast("No data available", color='error')
                    return

                fig, ax = plt.subplots(figsize=(10, 6))
                sns.barplot(x='furnishingstatus', y='avg_price',
                           data=df.sort_values('avg_price'),
                           palette='coolwarm', ax=ax)
                ax.set_title('Average Price by Furnishing Status')
                ax.set_ylabel('Price (₹)')
                self.display_plot(fig)

            elif analysis_type == 'Price Distribution by Bedrooms':
                df = self.get_data_from_db("""
                    SELECT bedrooms, AVG(price) as avg_price
                    FROM housing GROUP BY bedrooms""")

                if df.empty:
                    toast("No data available", color='error')
                    return

                fig, ax = plt.subplots(figsize=(10, 6))
                sns.barplot(x='bedrooms', y='avg_price',
                           data=df.sort_values('bedrooms'),
                           palette='viridis', ax=ax)
                ax.set_title('Average Price by Number of Bedrooms')
                ax.set_ylabel('Price (₹)')
                ax.set_xlabel('Number of Bedrooms')
                self.display_plot(fig)

            elif analysis_type == 'Price vs Area Scatter Plot':
                df = self.get_data_from_db("SELECT price, area FROM housing")

                if df.empty:
                    toast("No data available", color='error')
                    return

                fig, ax = plt.subplots(figsize=(10, 6))
                sns.scatterplot(x='area', y='price', data=df, alpha=0.6, ax=ax)
                ax.set_title('Price vs Area')
                ax.set_ylabel('Price (₹)')
                ax.set_xlabel('Area (sq ft)')
                self.display_plot(fig)

            elif analysis_type == 'Price Range Distribution':
                df = self.get_data_from_db("SELECT price FROM housing")

                if df.empty:
                    toast("No data available", color='error')
                    return

                fig, ax = plt.subplots(figsize=(10, 6))
                sns.histplot(df['price'], bins=20, kde=True, ax=ax)
                ax.set_title('Price Distribution')
                ax.set_ylabel('Number of Properties')
                ax.set_xlabel('Price (₹)')
                self.display_plot(fig)

    def correlation_analysis(self):
        """Show feature correlations"""
        with use_scope('correlation-analysis', clear=True):
            put_markdown("## Correlation Analysis")

            analysis_type = select("Select analysis type", [
                'Feature Correlation Heatmap',
                'Bedroom vs Bathroom Relationship',
                'Parking Space Analysis',
                'Amenities Impact on Price'
            ])

            if analysis_type == 'Feature Correlation Heatmap':
                df = self.get_data_from_db("SELECT * FROM housing")

                if df.empty:
                    toast("No data available", color='error')
                    return

                # Convert categorical columns to numeric
                categorical_cols = ['mainroad', 'guestroom', 'basement',
                                  'hotwaterheating', 'airconditioning',
                                  'prefarea', 'furnishingstatus']

                for col in categorical_cols:
                    if col in df.columns:
                        df[col] = pd.factorize(df[col])[0]

                # Create correlation matrix
                corr = df.corr()

                fig, ax = plt.subplots(figsize=(12, 8))
                sns.heatmap(corr, annot=True, cmap='coolwarm',
                           fmt='.2f', vmin=-1, vmax=1, ax=ax)
                ax.set_title('Feature Correlation Heatmap')
                self.display_plot(fig)

            elif analysis_type == 'Bedroom vs Bathroom Relationship':
                df = self.get_data_from_db("""
                    SELECT bedrooms, bathrooms, COUNT(*) as count
                    FROM housing GROUP BY bedrooms, bathrooms""")

                if df.empty:
                    toast("No data available", color='error')
                    return

                fig, ax = plt.subplots(figsize=(10, 6))
                pivot_df = df.pivot("bedrooms", "bathrooms", "count")
                sns.heatmap(pivot_df, annot=True, fmt="d", cmap="YlGnBu", ax=ax)
                ax.set_title('Bedroom vs Bathroom Relationship')
                ax.set_xlabel('Number of Bathrooms')
                ax.set_ylabel('Number of Bedrooms')
                self.display_plot(fig)

            elif analysis_type == 'Parking Space Analysis':
                df = self.get_data_from_db("""
                    SELECT parking, AVG(price) as avg_price, COUNT(*) as count
                    FROM housing GROUP BY parking""")

                if df.empty:
                    toast("No data available", color='error')
                    return

                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

                # Price by parking spaces
                sns.barplot(x='parking', y='avg_price', data=df, ax=ax1)
                ax1.set_title('Average Price by Parking Spaces')
                ax1.set_ylabel('Average Price (₹)')
                ax1.set_xlabel('Number of Parking Spaces')

                # Count of properties by parking spaces
                sns.barplot(x='parking', y='count', data=df, ax=ax2)
                ax2.set_title('Property Count by Parking Spaces')
                ax2.set_ylabel('Number of Properties')
                ax2.set_xlabel('Number of Parking Spaces')

                plt.tight_layout()
                self.display_plot(fig)

            elif analysis_type == 'Amenities Impact on Price':
                amenities = ['mainroad', 'guestroom', 'basement',
                           'hotwaterheating', 'airconditioning', 'prefarea']

                fig, axes = plt.subplots(2, 3, figsize=(18, 10))
                axes = axes.flatten()

                for i, amenity in enumerate(amenities):
                    df = self.get_data_from_db(f"""
                        SELECT {amenity} as amenity, AVG(price) as avg_price
                        FROM housing GROUP BY {amenity}""")

                    if not df.empty:
                        sns.barplot(x='amenity', y='avg_price', data=df, ax=axes[i])
                        axes[i].set_title(f'Price by {amenity.capitalize()}')
                        axes[i].set_ylabel('Average Price (₹)')
                        axes[i].set_xlabel('')

                plt.tight_layout()
                self.display_plot(fig)

    def area_analysis(self):
        """Analyze property area distribution"""
        with use_scope('area-analysis', clear=True):
            put_markdown("## Area Analysis")

            df = self.get_data_from_db("SELECT area, price FROM housing")

            if df.empty:
                toast("No data available", color='error')
                return

            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

            # Area distribution
            sns.histplot(df['area'], bins=20, kde=True, ax=ax1)
            ax1.set_title('Property Area Distribution')
            ax1.set_xlabel('Area (sq ft)')
            ax1.set_ylabel('Number of Properties')

            # Area vs Price
            sns.scatterplot(x='area', y='price', data=df, alpha=0.6, ax=ax2)
            ax2.set_title('Area vs Price')
            ax2.set_xlabel('Area (sq ft)')
            ax2.set_ylabel('Price (₹)')

            plt.tight_layout()
            self.display_plot(fig)

    def stories_analysis(self):
        """Analyze stories distribution"""
        with use_scope('stories-analysis', clear=True):
            put_markdown("## Stories Analysis")

            df = self.get_data_from_db("""
                SELECT stories, AVG(price) as avg_price, COUNT(*) as count
                FROM housing GROUP BY stories""")

            if df.empty:
                toast("No data available", color='error')
                return

            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

            # Average price by stories
            sns.barplot(x='stories', y='avg_price', data=df, ax=ax1)
            ax1.set_title('Average Price by Stories')
            ax1.set_xlabel('Number of Stories')
            ax1.set_ylabel('Average Price (₹)')

            # Count of properties by stories
            sns.barplot(x='stories', y='count', data=df, ax=ax2)
            ax2.set_title('Property Count by Stories')
            ax2.set_xlabel('Number of Stories')
            ax2.set_ylabel('Number of Properties')

            plt.tight_layout()
            self.display_plot(fig)

    def display_plot(self, fig):
        """Display matplotlib figure as image"""
        img = io.BytesIO()
        plt.savefig(img, format='png', bbox_inches='tight', dpi=100)
        img.seek(0)
        img_data = base64.b64encode(img.read()).decode('utf-8')
        plt.close(fig)
        put_image(f'data:image/png;base64,{img_data}')

    def main(self):
        """Main application interface"""
        put_markdown("# 🏠 Housing Data Analyzer")

        put_tabs([
            {'title': '📤 Upload Data', 'content': [
                put_button("Upload CSV", onclick=self.upload_file),
                put_scope('upload-content')
            ]},
            {'title': '💰 Price Analysis', 'content': [
                put_button("Show Price Analysis", onclick=self.price_distribution),
                put_scope('price-analysis')
            ]},
            {'title': '📊 Correlation', 'content': [
                put_button("Show Correlation Analysis", onclick=self.correlation_analysis),
                put_scope('correlation-analysis')
            ]},
            {'title': '📐 Area Analysis', 'content': [
                put_button("Show Area Analysis", onclick=self.area_analysis),
                put_scope('area-analysis')
            ]},
            {'title': '🏢 Stories Analysis', 'content': [
                put_button("Show Stories Analysis", onclick=self.stories_analysis),
                put_scope('stories-analysis')
            ]}
        ])

def main():
    app = HousingApp()
    app.main()

if __name__ == '__main__':
    # Start the web server on port 8081
    start_server(main, port=8082, debug=True)

